@model LibraryMVC.Application.ViewModels.Book.ListOfBookForListVm

@{
    ViewData["Title"] = "Katalog";
}

<h1>Katalog</h1>

<br />
<div class="container p-4 bg-light bg-opacity-75 rounded-3 shadow-lg border">
    <form asp-action="Index" asp-controller="Book" method="post" name="bookForm">
        <div class="row mb-4 justify-content-between">
            <div class="col-1">
                <select asp-for="PageSize" class="form-select" onchange="this.form.submit()">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="40">40</option>
                </select>
            </div>
            <div class="input-group w-25">
                <input type="text" asp-for="SearchString" name="searchString" id="searchString" class="form-control" placeholder="Wyszukaj" />
                <button class="btn btn-primary" type="submit">Szukaj</button>
            </div>
        </div>

        <div class="row">
            <table class="table table-hover" id="booksTable">
                <thead>
                    <tr>
                        <th id="Nr" onclick="sortTable('Nr')">
                            Nr <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Title" onclick="sortTable('Title')">
                            Tytuł <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Author" onclick="sortTable('Author')">
                            Autor <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="RelaseDate" onclick="sortTable('RelaseDate')">
                            Data wydania <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Genre" onclick="sortTable('Genre')">
                            Gatunek <i class="fa-solid fa-sort"></i>
                        </th>
                    </tr>
                </thead>
                <tbody>

                    @{
                        int position = 1;
                        if (Model.CurrentPage > 1)
                        {
                            position = (Model.CurrentPage-1) * Model.PageSize + 1;    
                        }
                     }
                    @foreach (var item in Model.Books) {
                            <tr class="cursor-pointer" onclick="location.href = '@Url.ActionLink("ViewBook", "Book", new { id=item.Id})'">
                            <td>
                                @position
                                @{position++;}
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Title)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.AuthorFullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RelaseYear)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Genre)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row mt-3">
            <nav class="p-0">
                <ul class="pagination">
                    @{
                        double numberOfPages = Math.Ceiling((double)Model.Count / Model.PageSize);
                        int currentPage = Model.CurrentPage;

                        if(currentPage == 1)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Poprzednia</a>
                            </li>
                        }else
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:PagerClick(@currentPage-1)">Poprzednia</a>
                            </li>
                        }

                        @for (int i = 1; i <= numberOfPages; i++)
                        {
                            if (i != Model.CurrentPage)
                            {
                                        <li class="page-item">
                                            <a class="page-link" href="javascript:PagerClick(@i)">@i</a>
                                        </li>
                            }
                            else
                            {
                                        <li class="page-item active">
                                            <a class="page-link">@i</a>
                                        </li>
                            }
                        }


                        if (currentPage == numberOfPages)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Następna</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                            <a class="page-link" href="javascript:PagerClick(@currentPage+1)">Następna</a>
                            </li>
                        }
                    }
                </ul>
            </nav>


            <input type="hidden" name="pageNumber" id="pageNumber" />
            <input type="hidden" name="pageSize" id="pageSize" />
        </div>
    </form>
    @{ bool isLoggedIn = @User.Identity.IsAuthenticated;}
</div>

@section Scripts
{
    <script type="text/javascript">

         let sortedColumn = null;
         let sortOrder = 1;

        function sortTable(columnId) {
            const table = document.getElementById('booksTable');
            const rows = Array.from(table.rows).slice(1);
            const headerCell = document.getElementById(columnId);
            const icons = document.querySelectorAll('.fa-sort-up, .fa-sort-down');
            icons.forEach(icon => {
                icon.classList.remove('fa-sort-up', 'fa-sort-down');
                icon.classList.add('fa-sort');
            });

            if (sortedColumn === headerCell) {
                sortOrder = -sortOrder;
            } else {
                sortedColumn = headerCell;
                sortOrder = 1;
            }

            const icon = headerCell.querySelector('i');
            icon.classList.remove('fa-sort');
            icon.classList.add(sortOrder === 1 ? 'fa-sort-up' : 'fa-sort-down');

            const sortedRows = rows.sort((a, b) => {
                const cellA = a.cells[sortedColumn.cellIndex];
                const cellB = b.cells[sortedColumn.cellIndex];
                let aValue = cellA.innerText;
                let bValue = cellB.innerText;

                if (columnId === 'Nr') {
                    aValue = parseInt(aValue);
                    bValue = parseInt(bValue);
                }
                else if (columnId === 'RelaseDate') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }

                if (aValue < bValue) {
                    return -sortOrder;
                }
                if (aValue > bValue) {
                    return sortOrder;
                }
                return 0;
            });

            for (const row of sortedRows) {
                table.tBodies[0].appendChild(row);
            }
        }

        function PagerClick(index)
        {
            document.getElementById("pageNumber").value = index;
            document.forms["bookForm"].submit();
        }

    </script>
}
