@model LibraryMVC.Application.ViewModels.Book.ListOfBookForListVm

@{
    ViewData["Title"] = "Zarządzaj książkami";
}

<partial name="_Notification" />

<h1 class="fw-bold">Zarządzaj książkami</h1>

<div class="row justify-content-start my-4">
    <div class="col-auto">
        <a class="btn btn-success btn-lg" asp-controller="Book" asp-action="AddNewBook">
            <i class="fa-solid fa-book"></i>&nbsp Dodaj książkę
        </a>
    </div>
    <div class="col-auto">
        <a class="btn btn-success btn-lg" asp-controller="Book" asp-action="AddNewAuthor">
            <i class="fa-solid fa-pen-nib"></i>&nbsp Dodaj autora
        </a>
    </div>
    <div class="col-auto">
        <a class="btn btn-success btn-lg" asp-controller="Book" asp-action="AddNewPublisher">
            <i class="fa-solid fa-address-book"></i>&nbsp Dodaj wydawcę
        </a>
    </div>
    <div class="col-auto">
        <a class="btn btn-success btn-lg" asp-controller="Book" asp-action="AddNewGenre">
            <i class="fa-solid fa-square-plus"></i>&nbsp Dodaj gatunek
        </a>
    </div>
</div>

<div class="container p-4 bg-light bg-opacity-75 rounded-3 shadow-lg border">
    <form asp-action="AdminBookPanel" asp-controller="Book" method="post">
        <div class="row mb-4 justify-content-between">
            <div class="col-1">
                <select asp-for="PageSize" class="form-select" onchange="this.form.submit()">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="40">40</option>
                </select>
            </div>
            <div class="input-group w-25">
                <input type="text" asp-for="SearchString" name="searchString" id="searchString" class="form-control" placeholder="Wyszukaj" />
                <button class="btn btn-primary" type="submit">Szukaj</button>
            </div>
        </div>

        <div class="row">
            <table class="table table-hover" id="booksTable">
                <thead>
                    <tr class="cursor-pointer">
                        <th id="Nr">
                            Nr <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Title">
                            Tytuł <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Author">
                            Autor <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="RelaseDate">
                            Data wydania <i class="fa-solid fa-sort"></i>
                        </th>
                        <th id="Genre">
                            Gatunek <i class="fa-solid fa-sort"></i>
                        </th>
                    </tr>
                </thead>
                <tbody>

                    @{
                        int position = 1;
                        if (Model.CurrentPage > 1)
                        {
                            position = (Model.CurrentPage - 1) * Model.PageSize + 1;
                        }
                     }
                    @foreach (var item in Model.Books)
                    {
                            <tr class="cursor-pointer" onclick="location.href = '@Url.ActionLink("ViewBookForLibrarian", "Book", new { id=item.Id})'">
                                <td>
                                    @position
                                    @{
                                        position++;
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Title)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.AuthorFullName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RelaseYear)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Genre)
                                </td>
                                <td>
                                    <div class="d-grid gap-2 d-md-block">
                                        <a class="btn btn-warning btn-sm" role="button" asp-action="EditBook" asp-route-id="@item.Id">
                                            <i class="fa-solid fa-pen-to-square"></i> Edytuj
                                        </a>
                                        <a class="btn btn-danger btn-sm" role="button" asp-action="DeleteBook" asp-route-id="@item.Id">
                                            <i class="fa-solid fa-trash-can"></i> Usuń
                                        </a>
                                    </div>
                                </td>
                            </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row mt-3">
            <nav class="p-0">
                <ul class="pagination">
                    @{  
                        double numberOfPages = Math.Ceiling((double)Model.Count / Model.PageSize);
                        int currentPage = Model.CurrentPage;

                        if (currentPage == 1)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Poprzednia</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:PagerClick(@currentPage-1)">Poprzednia</a>
                            </li>
                        }

                        @for (int i = 1; i <= numberOfPages; i++)
                        {
                            if (i != Model.CurrentPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="javascript:PagerClick(@i)">@i</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item active">
                                    <a class="page-link">@i</a>
                                </li>
                            }
                        }


                        if (currentPage == numberOfPages)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Następna</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:PagerClick(@currentPage+1)">Następna</a>
                            </li>
                        }
                    }
                </ul>
            </nav>


            <input type="hidden" name="pageNumber" id="pageNumber" />
            <input type="hidden" name="pageSize" id="pageSize" />
        </div>
    </form>
</div>

@section Scripts
{
    <script type="text/javascript">

        let sortedColumn = null;
        let sortOrder = 1;

        function sortTable(columnId)
        {
            const table = document.getElementById("booksTable");
            const rows = Array.from(table.rows).slice(1);
            const headerCell = document.getElementById(columnId);
            const icons = document.querySelectorAll(".fa-sort-up, .fa-sort-down");
            icons.forEach(icon => {
                icon.classList.remove("fa-sort-up", "fa-sort-down");
                icon.classList.add("fa-sort");
            });

            if(sortedColumn === headerCell){
                sortOrder = -sortOrder;
            } else {
                sortedColumn = headerCell;
                sortOrder = 1;
            }

            const icon = headerCell.querySelector("i");
            icon.classList.remove("fa-sort");
            icon.classList.add(sortOrder == 1 ? "fa-sort-up" : "fa-sort-down");
            
            const sortedRows = rows.sort((a, b) => {
                const cellA = a.cells[sortedColumn.cellIndex];
                const cellB = b.cells[sortedColumn.cellIndex];
                let aValue = cellA.innerText;
                let bValue = cellB.innerText;

                if (columnId === "Nr") {
                    aValue = parseInt(aValue);
                    bValue = parseInt(bValue);
                }
                else if (columnId === "RelaseDate") {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                }

                if (aValue < bValue) {
                    return -sortOrder;
                }
                if (aValue > bValue) {
                    return sortOrder;
                }
                return 0;
            });

            for (const row of sortedRows) {
                table.tBodies[0].appendChild(row);
            }
        }

        function PagerClick(index)
        {
            document.getElementById("pageNumber").value = index;
            document.forms[0].submit();
        }

        document.getElementById("Nr").addEventListener("click",() => sortTable("Nr"));
        document.getElementById("Title").addEventListener("click",() => sortTable("Title"));
        document.getElementById("Author").addEventListener("click",() => sortTable("Author"));
        document.getElementById("RelaseDate").addEventListener("click",() => sortTable("RelaseDate"));
        document.getElementById("Genre").addEventListener("click",() => sortTable("Genre"));
    </script>
}
